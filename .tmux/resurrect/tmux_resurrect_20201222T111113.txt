pane	local	1	:zsh	0	:	1	:/Users/admin	1	zsh	:
pane	local	2	:nvim	0	:	1	:/Users/admin/Documents/Javascript	1	zsh	:
pane	local	3	:ssh	0	:-	1	:/Users/admin	1	ssh	:ssh umr@192.168.50.200
pane	local	4	:bash	1	:*	1	:/Users/admin/Documents/todo	0	nvim	:nvim todo.md
pane	local	4	:bash	1	:*	2	:/usr	1	bash	:/bin/bash -c #!/bin/bash\012set -u\012\012# Check if script is run non-interactively (e.g. CI)\012# If it is run non-interactively we should not prompt for passwords.\012if [[ ! -t 0 || -n "${CI-}" ]]; then\012  NONINTERACTIVE=1\012fi\012\012# First check if the OS is Linux.\012if [[ "$(uname)" = "Linux" ]]; then\012  HOMEBREW_ON_LINUX=1\012fi\012\012# On macOS, this script installs to /usr/local only.\012# On Linux, it installs to /home/linuxbrew/.linuxbrew if you have sudo access\012# and ~/.linuxbrew otherwise.\012# To install elsewhere (which is unsupported)\012# you can untar https://github.com/Homebrew/brew/tarball/master\012# anywhere you like.\012if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then\012  HOMEBREW_PREFIX="/usr/local"\012  HOMEBREW_REPOSITORY="/usr/local/Homebrew"\012  HOMEBREW_CACHE="${HOME}/Library/Caches/Homebrew"\012\012  STAT="stat -f"\012  CHOWN="/usr/sbin/chown"\012  CHGRP="/usr/bin/chgrp"\012  GROUP="admin"\012  TOUCH="/usr/bin/touch"\012else\012  HOMEBREW_PREFIX_DEFAULT="/home/linuxbrew/.linuxbrew"\012  HOMEBREW_CACHE="${HOME}/.cache/Homebrew"\012\012  STAT="stat --printf"\012  CHOWN="/bin/chown"\012  CHGRP="/bin/chgrp"\012  GROUP="$(id -gn)"\012  TOUCH="/bin/touch"\012fi\012BREW_REPO="https://github.com/Homebrew/brew"\012\012# TODO: bump version when new macOS is released or announced\012MACOS_NEWEST_UNSUPPORTED="12.0"\012# TODO: bump version when new macOS is released\012MACOS_OLDEST_SUPPORTED="10.14"\012\012# For Homebrew on Linux\012REQUIRED_RUBY_VERSION=2.6  # https://github.com/Homebrew/brew/pull/6556\012REQUIRED_GLIBC_VERSION=2.13  # https://docs.brew.sh/Homebrew-on-Linux#requirements\012\012# no analytics during installation\012export HOMEBREW_NO_ANALYTICS_THIS_RUN=1\012export HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT=1\012\012# string formatters\012if [[ -t 1 ]]; then\012  tty_escape() { printf "\033[%sm" "$1"; }\012else\012  tty_escape() { :; }\012fi\012tty_mkbold() { tty_escape "1;$1"; }\012tty_underline="$(tty_escape "4;39")"\012tty_blue="$(tty_mkbold 34)"\012tty_red="$(tty_mkbold 31)"\012tty_bold="$(tty_mkbold 39)"\012tty_reset="$(tty_escape 0)"\012\012have_sudo_access() {\012  local -a args\012  if [[ -n "${SUDO_ASKPASS-}" ]]; then\012    args=("-A")\012  elif [[ -n "${NONINTERACTIVE-}" ]]; then\012    args=("-n")\012  fi\012\012  if [[ -z "${HAVE_SUDO_ACCESS-}" ]]; then\012    if [[ -n "${args[*]-}" ]]; then\012      SUDO="/usr/bin/sudo ${args[*]}"\012    else\012      SUDO="/usr/bin/sudo"\012    fi\012    if [[ -n "${NONINTERACTIVE-}" ]]; then\012      ${SUDO} -l mkdir &>/dev/null\012    else\012      ${SUDO} -v && ${SUDO} -l mkdir &>/dev/null\012    fi\012    HAVE_SUDO_ACCESS="$?"\012  fi\012\012  if [[ -z "${HOMEBREW_ON_LINUX-}" ]] && [[ "$HAVE_SUDO_ACCESS" -ne 0 ]]; then\012    abort "Need sudo access on macOS (e.g. the user $USER to be an Administrator)!"\012  fi\012\012  return "$HAVE_SUDO_ACCESS"\012}\012\012shell_join() {\012  local arg\012  printf "%s" "$1"\012  shift\012  for arg in "$@"; do\012    printf " "\012    printf "%s" "${arg// /\ }"\012  done\012}\012\012chomp() {\012  printf "%s" "${1/"$'\n'"/}"\012}\012\012ohai() {\012  printf "${tty_blue}==>${tty_bold} %s${tty_reset}\n" "$(shell_join "$@")"\012}\012\012warn() {\012  printf "${tty_red}Warning${tty_reset}: %s\n" "$(chomp "$1")"\012}\012\012abort() {\012  printf "%s\n" "$1"\012  exit 1\012}\012\012execute() {\012  if ! "$@"; then\012    abort "$(printf "Failed during: %s" "$(shell_join "$@")")"\012  fi\012}\012\012execute_sudo() {\012  local -a args=("$@")\012  if have_sudo_access; then\012    if [[ -n "${SUDO_ASKPASS-}" ]]; then\012      args=("-A" "${args[@]}")\012    fi\012    ohai "/usr/bin/sudo" "${args[@]}"\012    execute "/usr/bin/sudo" "${args[@]}"\012  else\012    ohai "${args[@]}"\012    execute "${args[@]}"\012  fi\012}\012\012getc() {\012  local save_state\012  save_state=$(/bin/stty -g)\012  /bin/stty raw -echo\012  IFS= read -r -n 1 -d '' "$@"\012  /bin/stty "$save_state"\012}\012\012wait_for_user() {\012  local c\012  echo\012  echo "Press RETURN to continue or any other key to abort"\012  getc c\012  # we test for \r and \n because some stuff does \r instead\012  if ! [[ "$c" == $'\r' || "$c" == $'\n' ]]; then\012    exit 1\012  fi\012}\012\012major_minor() {\012  echo "${1%%.*}.$(x="${1#*.}"; echo "${x%%.*}")"\012}\012\012if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then\012  macos_version="$(major_minor "$(/usr/bin/sw_vers -productVersion)")"\012fi\012\012version_gt() {\012  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -gt "${2#*.}" ]]\012}\012version_ge() {\012  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -ge "${2#*.}" ]]\012}\012version_lt() {\012  [[ "${1%.*}" -lt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -lt "${2#*.}" ]]\012}\012\012should_install_command_line_tools() {\012  if [[ -n "${HOMEBREW_ON_LINUX-}" ]]; then\012    return 1\012  fi\012\012  if version_gt "$macos_version" "10.13"; then\012    ! [[ -e "/Library/Developer/CommandLineTools/usr/bin/git" ]]\012  else\012    ! [[ -e "/Library/Developer/CommandLineTools/usr/bin/git" ]] ||\012      ! [[ -e "/usr/include/iconv.h" ]]\012  fi\012}\012\012get_permission() {\012  $STAT "%A" "$1"\012}\012\012user_only_chmod() {\012  [[ -d "$1" ]] && [[ "$(get_permission "$1")" != "755" ]]\012}\012\012exists_but_not_writable() {\012  [[ -e "$1" ]] && ! [[ -r "$1" && -w "$1" && -x "$1" ]]\012}\012\012get_owner() {\012  $STAT "%u" "$1"\012}\012\012file_not_owned() {\012  [[ "$(get_owner "$1")" != "$(id -u)" ]]\012}\012\012get_group() {\012  $STAT "%g" "$1"\012}\012\012file_not_grpowned() {\012  [[ " $(id -G "$USER") " != *" $(get_group "$1") "*  ]]\012}\012\012# Please sync with 'test_ruby()' in 'Library/Homebrew/utils/ruby.sh' from Homebrew/brew repository.\012test_ruby () {\012  if [[ ! -x $1 ]]\012  then\012    return 1\012  fi\012\012  "$1" --enable-frozen-string-literal --disable=gems,did_you_mean,rubyopt -rrubygems -e \\012    "abort if Gem::Version.new(RUBY_VERSION.to_s.dup).to_s.split('.').first(2) != \\012              Gem::Version.new('$REQUIRED_RUBY_VERSION').to_s.split('.').first(2)" 2>/dev/null\012}\012\012no_usable_ruby() {\012  local ruby_exec\012  IFS=$'\n' # Do word splitting on new lines only\012  for ruby_exec in $(which -a ruby); do\012    if test_ruby "$ruby_exec"; then\012      IFS=$' \t\n' # Restore IFS to its default value\012      return 1\012    fi\012  done\012  IFS=$' \t\n' # Restore IFS to its default value\012  return 0\012}\012\012outdated_glibc() {\012  local glibc_version\012  glibc_version=$(ldd --version | head -n1 | grep -o '[0-9.]*$' | grep -o '^[0-9]\+\.[0-9]\+')\012  version_lt "$glibc_version" "$REQUIRED_GLIBC_VERSION"\012}\012\012if [[ -n "${HOMEBREW_ON_LINUX-}" ]] && no_usable_ruby && outdated_glibc\012then\012    abort "$(cat <<-EOFABORT\012\011Homebrew requires Ruby $REQUIRED_RUBY_VERSION which was not found on your system.\012\011Homebrew portable Ruby requires Glibc version $REQUIRED_GLIBC_VERSION or newer,\012\011and your Glibc version is too old.\012\011See ${tty_underline}https://docs.brew.sh/Homebrew-on-Linux#requirements${tty_reset}\012\011Install Ruby $REQUIRED_RUBY_VERSION and add its location to your PATH.\012\011EOFABORT\012    )"\012fi\012\012# USER isn't always set so provide a fall back for the installer and subprocesses.\012if [[ -z "${USER-}" ]]; then\012  USER="$(chomp "$(id -un)")"\012  export USER\012fi\012\012# Invalidate sudo timestamp before exiting (if it wasn't active before).\012if ! /usr/bin/sudo -n -v 2>/dev/null; then\012  trap '/usr/bin/sudo -k' EXIT\012fi\012\012# Things can fail later if `pwd` doesn't exist.\012# Also sudo prints a warning message for no good reason\012cd "/usr" || exit 1\012\012####################################################################### script\012if ! command -v git >/dev/null; then\012    abort "$(cat <<EOABORT\012You must install Git before installing Homebrew. See:\012  ${tty_underline}https://docs.brew.sh/Installation${tty_reset}\012EOABORT\012)"\012fi\012\012if ! command -v curl >/dev/null; then\012    abort "$(cat <<EOABORT\012You must install cURL before installing Homebrew. See:\012  ${tty_underline}https://docs.brew.sh/Installation${tty_reset}\012EOABORT\012)"\012fi\012\012if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then\012 have_sudo_access\012else\012  if [[ -n "${NONINTERACTIVE-}" ]] ||\012     [[ -w "$HOMEBREW_PREFIX_DEFAULT" ]] ||\012     [[ -w "/home/linuxbrew" ]] ||\012     [[ -w "/home" ]]; then\012    HOMEBREW_PREFIX="$HOMEBREW_PREFIX_DEFAULT"\012  else\012    trap exit SIGINT\012    if ! /usr/bin/sudo -n -v &>/dev/null; then\012      ohai "Select the Homebrew installation directory"\012      echo "- ${tty_bold}Enter your password${tty_reset} to install to ${tty_underline}${HOMEBREW_PREFIX_DEFAULT}${tty_reset} (${tty_bold}recommended${tty_reset})"\012      echo "- ${tty_bold}Press Control-D${tty_reset} to install to ${tty_underline}$HOME/.linuxbrew${tty_reset}"\012      echo "- ${tty_bold}Press Control-C${tty_reset} to cancel installation"\012    fi\012    if have_sudo_access; then\012      HOMEBREW_PREFIX="$HOMEBREW_PREFIX_DEFAULT"\012    else\012      HOMEBREW_PREFIX="$HOME/.linuxbrew"\012    fi\012    trap - SIGINT\012  fi\012  HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew"\012fi\012\012if [[ "${EUID:-${UID}}" == "0" ]]; then\012  abort "Don't run this as root!"\012elif [[ -d "$HOMEBREW_PREFIX" && ! -x "$HOMEBREW_PREFIX" ]]; then\012  abort "$(cat <<EOABORT\012The Homebrew prefix, ${HOMEBREW_PREFIX}, exists but is not searchable.\012If this is not intentional, please restore the default permissions and\012try running the installer again:\012    sudo chmod 775 ${HOMEBREW_PREFIX}\012EOABORT\012)"\012fi\012\012UNAME_MACHINE="$(uname -m)"\012\012if [[ -z "${HOMEBREW_ON_LINUX-}" ]] && [[ "$UNAME_MACHINE" == "arm64" ]]; then\012  abort "$(cat <<EOABORT\012Homebrew is not (yet) supported on ARM processors!\012Rerun the Homebrew installer under Rosetta 2.\012If you really know what you are doing and are prepared for a very broken\012experience you can use another installation option for installing on ARM:\012  ${tty_underline}https://docs.brew.sh/Installation${tty_reset}\012EOABORT\012)"\012fi\012\012if [[ "$UNAME_MACHINE" != "x86_64" ]]; then\012  abort "Homebrew is only supported on Intel processors!"\012fi\012\012if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then\012  if version_lt "$macos_version" "10.7"; then\012    abort "$(cat <<EOABORT\012Your Mac OS X version is too old. See:\012  ${tty_underline}https://github.com/mistydemeo/tigerbrew${tty_reset}\012EOABORT\012)"\012  elif version_lt "$macos_version" "10.10"; then\012    abort "Your OS X version is too old"\012  elif version_ge "$macos_version" "$MACOS_NEWEST_UNSUPPORTED" || \\012    version_lt "$macos_version" "$MACOS_OLDEST_SUPPORTED"; then\012    who="We"\012    what=""\012    if version_ge "$macos_version" "$MACOS_NEWEST_UNSUPPORTED"; then\012      what="pre-release version"\012    else\012      who+=" (and Apple)"\012      what="old version"\012    fi\012    ohai "You are using macOS ${macos_version}."\012    ohai "${who} do not provide support for this ${what}."\012\012    echo "$(cat <<EOS\012This installation may not succeed.\012After installation, you will encounter build failures with some formulae.\012Please create pull requests instead of asking for help on Homebrew\'s GitHub,\012Discourse, Twitter or IRC. You are responsible for resolving any issues you\012experience while you are running this ${what}.\012EOS\012)\012"\012  fi\012fi\012\012ohai "This script will install:"\012echo "${HOMEBREW_PREFIX}/bin/brew"\012echo "${HOMEBREW_PREFIX}/share/doc/homebrew"\012echo "${HOMEBREW_PREFIX}/share/man/man1/brew.1"\012echo "${HOMEBREW_PREFIX}/share/zsh/site-functions/_brew"\012echo "${HOMEBREW_PREFIX}/etc/bash_completion.d/brew"\012echo "${HOMEBREW_REPOSITORY}"\012\012# Keep relatively in sync with\012# https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb\012directories=(bin etc include lib sbin share opt var\012             Frameworks\012             etc/bash_completion.d lib/pkgconfig\012             share/aclocal share/doc share/info share/locale share/man\012             share/man/man1 share/man/man2 share/man/man3 share/man/man4\012             share/man/man5 share/man/man6 share/man/man7 share/man/man8\012             var/log var/homebrew var/homebrew/linked\012             bin/brew)\012group_chmods=()\012for dir in "${directories[@]}"; do\012  if exists_but_not_writable "${HOMEBREW_PREFIX}/${dir}"; then\012    group_chmods+=("${HOMEBREW_PREFIX}/${dir}")\012  fi\012done\012\012# zsh refuses to read from these directories if group writable\012directories=(share/zsh share/zsh/site-functions)\012zsh_dirs=()\012for dir in "${directories[@]}"; do\012  zsh_dirs+=("${HOMEBREW_PREFIX}/${dir}")\012done\012\012directories=(bin etc include lib sbin share var opt\012             share/zsh share/zsh/site-functions\012             var/homebrew var/homebrew/linked\012             Cellar Caskroom Homebrew Frameworks)\012mkdirs=()\012for dir in "${directories[@]}"; do\012  if ! [[ -d "${HOMEBREW_PREFIX}/${dir}" ]]; then\012    mkdirs+=("${HOMEBREW_PREFIX}/${dir}")\012  fi\012done\012\012user_chmods=()\012if [[ "${#zsh_dirs[@]}" -gt 0 ]]; then\012  for dir in "${zsh_dirs[@]}"; do\012    if user_only_chmod "${dir}"; then\012      user_chmods+=("${dir}")\012    fi\012  done\012fi\012\012chmods=()\012if [[ "${#group_chmods[@]}" -gt 0 ]]; then\012  chmods+=("${group_chmods[@]}")\012fi\012if [[ "${#user_chmods[@]}" -gt 0 ]]; then\012  chmods+=("${user_chmods[@]}")\012fi\012\012chowns=()\012chgrps=()\012if [[ "${#chmods[@]}" -gt 0 ]]; then\012  for dir in "${chmods[@]}"; do\012    if file_not_owned "${dir}"; then\012      chowns+=("${dir}")\012    fi\012    if file_not_grpowned "${dir}"; then\012      chgrps+=("${dir}")\012    fi\012  done\012fi\012\012if [[ "${#group_chmods[@]}" -gt 0 ]]; then\012  ohai "The following existing directories will be made group writable:"\012  printf "%s\n" "${group_chmods[@]}"\012fi\012if [[ "${#user_chmods[@]}" -gt 0 ]]; then\012  ohai "The following existing directories will be made writable by user only:"\012  printf "%s\n" "${user_chmods[@]}"\012fi\012if [[ "${#chowns[@]}" -gt 0 ]]; then\012  ohai "The following existing directories will have their owner set to ${tty_underline}${USER}${tty_reset}:"\012  printf "%s\n" "${chowns[@]}"\012fi\012if [[ "${#chgrps[@]}" -gt 0 ]]; then\012  ohai "The following existing directories will have their group set to ${tty_underline}${GROUP}${tty_reset}:"\012  printf "%s\n" "${chgrps[@]}"\012fi\012if [[ "${#mkdirs[@]}" -gt 0 ]]; then\012  ohai "The following new directories will be created:"\012  printf "%s\n" "${mkdirs[@]}"\012fi\012\012if should_install_command_line_tools; then\012  ohai "The Xcode Command Line Tools will be installed."\012fi\012\012if [[ -z "${NONINTERACTIVE-}" ]]; then\012  wait_for_user\012fi\012\012if [[ -d "${HOMEBREW_PREFIX}" ]]; then\012  if [[ "${#chmods[@]}" -gt 0 ]]; then\012    execute_sudo "/bin/chmod" "u+rwx" "${chmods[@]}"\012  fi\012  if [[ "${#group_chmods[@]}" -gt 0 ]]; then\012    execute_sudo "/bin/chmod" "g+rwx" "${group_chmods[@]}"\012  fi\012  if [[ "${#user_chmods[@]}" -gt 0 ]]; then\012    execute_sudo "/bin/chmod" "755" "${user_chmods[@]}"\012  fi\012  if [[ "${#chowns[@]}" -gt 0 ]]; then\012    execute_sudo "$CHOWN" "$USER" "${chowns[@]}"\012  fi\012  if [[ "${#chgrps[@]}" -gt 0 ]]; then\012    execute_sudo "$CHGRP" "$GROUP" "${chgrps[@]}"\012  fi\012else\012  execute_sudo "/bin/mkdir" "-p" "${HOMEBREW_PREFIX}"\012  if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then\012    execute_sudo "$CHOWN" "root:wheel" "${HOMEBREW_PREFIX}"\012  else\012    execute_sudo "$CHOWN" "$USER:$GROUP" "${HOMEBREW_PREFIX}"\012  fi\012fi\012\012if [[ "${#mkdirs[@]}" -gt 0 ]]; then\012  execute_sudo "/bin/mkdir" "-p" "${mkdirs[@]}"\012  execute_sudo "/bin/chmod" "g+rwx" "${mkdirs[@]}"\012  execute_sudo "$CHOWN" "$USER" "${mkdirs[@]}"\012  execute_sudo "$CHGRP" "$GROUP" "${mkdirs[@]}"\012fi\012\012if ! [[ -d "${HOMEBREW_CACHE}" ]]; then\012  if [[ -z "${HOMEBREW_ON_LINUX-}" ]]; then\012    execute_sudo "/bin/mkdir" "-p" "${HOMEBREW_CACHE}"\012  else\012    execute "/bin/mkdir" "-p" "${HOMEBREW_CACHE}"\012  fi\012fi\012if exists_but_not_writable "${HOMEBREW_CACHE}"; then\012  execute_sudo "/bin/chmod" "g+rwx" "${HOMEBREW_CACHE}"\012fi\012if file_not_owned "${HOMEBREW_CACHE}"; then\012  execute_sudo "$CHOWN" "$USER" "${HOMEBREW_CACHE}"\012fi\012if file_not_grpowned "${HOMEBREW_CACHE}"; then\012  execute_sudo "$CHGRP" "$GROUP" "${HOMEBREW_CACHE}"\012fi\012if [[ -d "${HOMEBREW_CACHE}" ]]; then\012  execute "$TOUCH" "${HOMEBREW_CACHE}/.cleaned"\012fi\012\012if should_install_command_line_tools && version_ge "$macos_version" "10.13"; then\012  ohai "Searching online for the Command Line Tools"\012  # This temporary file prompts the 'softwareupdate' utility to list the Command Line Tools\012  clt_placeholder="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"\012  execute_sudo "$TOUCH" "$clt_placeholder"\012\012  clt_label_command="/usr/sbin/softwareupdate -l |\012                      grep -B 1 -E 'Command Line Tools' |\012                      awk -F'*' '/^ *\\*/ {print \$2}' |\012                      sed -e 's/^ *Label: //' -e 's/^ *//' |\012                      sort -V |\012                      tail -n1"\012  clt_label="$(chomp "$(/bin/bash -c "$clt_label_command")")"\012\012  if [[ -n "$clt_label" ]]; then\012    ohai "Installing $clt_label"\012    execute_sudo "/usr/sbin/softwareupdate" "-i" "$clt_label"\012    execute_sudo "/bin/rm" "-f" "$clt_placeholder"\012    execute_sudo "/usr/bin/xcode-select" "--switch" "/Library/Developer/CommandLineTools"\012  fi\012fi\012\012# Headless install may have failed, so fallback to original 'xcode-select' method\012if should_install_command_line_tools && test -t 0; then\012  ohai "Installing the Command Line Tools (expect a GUI popup):"\012  execute_sudo "/usr/bin/xcode-select" "--install"\012  echo "Press any key when the installation has completed."\012  getc\012  execute_sudo "/usr/bin/xcode-select" "--switch" "/Library/Developer/CommandLineTools"\012fi\012\012if [[ -z "${HOMEBREW_ON_LINUX-}" ]] && ! output="$(/usr/bin/xcrun clang 2>&1)" && [[ "$output" == *"license"* ]]; then\012  abort "$(cat <<EOABORT\012You have not agreed to the Xcode license.\012Before running the installer again please agree to the license by opening\012Xcode.app or running:\012    sudo xcodebuild -license\012EOABORT\012)"\012fi\012\012ohai "Downloading and installing Homebrew..."\012(\012  cd "${HOMEBREW_REPOSITORY}" >/dev/null || return\012\012  # we do it in four steps to avoid merge errors when reinstalling\012  execute "git" "init" "-q"\012\012  # "git remote add" will fail if the remote is defined in the global config\012  execute "git" "config" "remote.origin.url" "${BREW_REPO}"\012  execute "git" "config" "remote.origin.fetch" "+refs/heads/*:refs/remotes/origin/*"\012\012  # ensure we don't munge line endings on checkout\012  execute "git" "config" "core.autocrlf" "false"\012\012  execute "git" "fetch" "origin" "--force"\012  execute "git" "fetch" "origin" "--tags" "--force"\012\012  execute "git" "reset" "--hard" "origin/master"\012\012  execute "ln" "-sf" "${HOMEBREW_REPOSITORY}/bin/brew" "${HOMEBREW_PREFIX}/bin/brew"\012\012  execute "${HOMEBREW_PREFIX}/bin/brew" "update" "--force"\012) || exit 1\012\012if [[ ":${PATH}:" != *":${HOMEBREW_PREFIX}/bin:"* ]]; then\012  warn "${HOMEBREW_PREFIX}/bin is not in your PATH."\012fi\012\012ohai "Installation successful!"\012echo\012\012# Use the shell's audible bell.\012if [[ -t 1 ]]; then\012  printf "\a"\012fi\012\012# Use an extra newline and bold to avoid this being missed.\012ohai "Homebrew has enabled anonymous aggregate formulae and cask analytics."\012echo "$(cat <<EOS\012${tty_bold}Read the analytics documentation (and how to opt-out) here:\012  ${tty_underline}https://docs.brew.sh/Analytics${tty_reset}\012No analytics data has been sent yet (or will be during this \`install\` run).\012EOS\012)\012"\012\012ohai "Homebrew is run entirely by unpaid volunteers. Please consider donating:"\012echo "$(cat <<EOS\012  ${tty_underline}https://github.com/Homebrew/brew#donations${tty_reset}\012EOS\012)\012"\012\012(\012  cd "${HOMEBREW_REPOSITORY}" >/dev/null || return\012  execute "git" "config" "--replace-all" "homebrew.analyticsmessage" "true"\012  execute "git" "config" "--replace-all" "homebrew.caskanalyticsmessage" "true"\012) || exit 1\012\012ohai "Next steps:"\012echo "- Run \`brew help\` to get started"\012echo "- Further documentation: "\012echo "    ${tty_underline}https://docs.brew.sh${tty_reset}"\012\012if [[ -n "${HOMEBREW_ON_LINUX-}" ]]; then\012  case "$SHELL" in\012    */bash*)\012      if [[ -r "$HOME/.bash_profile" ]]; then\012        shell_profile="$HOME/.bash_profile"\012      else\012        shell_profile="$HOME/.profile"\012      fi\012      ;;\012    */zsh*)\012      shell_profile="$HOME/.zprofile"\012      ;;\012    *)\012      shell_profile="$HOME/.profile"\012      ;;\012  esac\012\012  echo "- Install the Homebrew dependencies if you have sudo access:"\012\012  if [[ $(command -v apt-get) ]]; then\012    echo "    sudo apt-get install build-essential"\012  elif [[ $(command -v yum) ]]; then\012    echo "    sudo yum groupinstall 'Development Tools'"\012  elif [[ $(command -v pacman) ]]; then\012    echo "    sudo pacman -S base-devel"\012  elif [[ $(command -v apk) ]]; then\012    echo "    sudo apk add build-base"\012  fi\012\012  cat <<EOS\012    See ${tty_underline}https://docs.brew.sh/linux${tty_reset} for more information\012- Add Homebrew to your ${tty_bold}PATH${tty_reset} in ${tty_underline}${shell_profile}${tty_reset}:\012    echo 'eval \$(${HOMEBREW_PREFIX}/bin/brew shellenv)' >> ${shell_profile}\012    eval \$(${HOMEBREW_PREFIX}/bin/brew shellenv)\012- We recommend that you install GCC:\012    brew install gcc\012\012EOS\012fi
pane	proxy	1	:clash	1	:*	1	:/Users/admin/.config/clash	1	zsh	:
pane	proxy	1	:clash	1	:*	2	:/Users/admin	0	zsh	:
pane	yabai	1	:skhd	1	:*	1	:/Users/admin/.config/skhd	1	zsh	:
pane	yabai	2	:yabai	0	:-	1	:/Users/admin/.config/yabai	1	zsh	:
pane	yabai	2	:yabai	0	:-	2	:/Users/admin/.config/yabai	0	zsh	:
window	local	1	0	:	6642,203x48,0,0,13
window	local	2	0	:	cc21,203x48,0,0,4
window	local	3	0	:-	663f,203x48,0,0,10
window	local	4	1	:*	820b,203x48,0,0{101x48,0,0,16,101x48,102,0,27}
window	proxy	1	1	:*	e6d2,313x68,0,0[313x34,0,0,1,313x33,0,35,12]
window	yabai	1	1	:*	d083,313x68,0,0,6
window	yabai	2	0	:-	e0a8,313x68,0,0[313x44,0,0,8,313x23,0,45,9]
state	local	proxy
